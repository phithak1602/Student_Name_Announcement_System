import paho.mqtt.client as mqtt

# ‡∏≠‡πà‡∏≤‡∏ô IP ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
with open("txt_file/mqtt_broker_ip.txt", "r") as f:
    MQTT_BROKER = f.read().strip()
#MQTT_BROKER = "192.168.1.103"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "localhost" ‡πÄ‡∏õ‡πá‡∏ô IP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
MQTT_PORT = 1883
TOPIC_COMMANDS = "esp8266/commands"
TOPIC_FEEDBACK = "esp8266/feedback"

sensor_status = 0
servo_set = 0
last_delay_value = None  # ‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        client.subscribe(TOPIC_COMMANDS)
    else:
        print("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏£‡∏´‡∏±‡∏™:", rc)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á feedback ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á ESP32
def send_feedback(message):
    client.publish(TOPIC_FEEDBACK, message)
    print(f"üì§ Sent feedback: {message}")

def read_servo_set():
    try:
        with open('txt_file/servo_state.txt', 'r') as f:
            value = f.read().strip()
            return int(value)
    except (FileNotFoundError, ValueError):
        return 0  # ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

def read_delay_servo():
    try:
        with open('txt_file/delay_servo.txt', 'r') as f:
            value = f.read().strip()
            return int(value)
    except (FileNotFoundError, ValueError):
        return 3000  # default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MQTT
def start_mqtt():
    global client
    client = mqtt.Client()
    client.on_connect = on_connect
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_start()

# === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ===
start_mqtt()

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
try:
    while True:
        # ‡∏≠‡πà‡∏≤‡∏ô delay ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        current_delay_value = read_delay_servo()

        # ‡∏ñ‡πâ‡∏≤ delay ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‚Üí ‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á
        if current_delay_value != last_delay_value:
            send_feedback(f"delay={current_delay_value}")
            print(f"üì§ delay_servo changed ‚Üí {current_delay_value} ms")
            last_delay_value = current_delay_value  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

        servo_set = read_servo_set()
        if servo_set == 1:
            send_feedback("open")
            print("send_feedback'open'")
            servo_set = 0
            with open('txt_file/servo_state.txt', 'w') as f:
                f.write(str(servo_set))
        pass
except KeyboardInterrupt:
    print("‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    client.loop_stop()
    client.disconnect()