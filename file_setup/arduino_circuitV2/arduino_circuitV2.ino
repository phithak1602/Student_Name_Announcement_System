#include <WiFi.h>
#include <WiFiManager.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>
#include "esp_sleep.h"
#include <Preferences.h>

Preferences preferences;

// ============ ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå ============
WiFiClient espClient;
PubSubClient client(espClient);
Servo myServo;

// ============ ‡∏Ç‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ============
#define BUZZER_PIN 27
#define SENSOR_PIN 33      // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ GPIO ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏∏‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å deep sleep
#define SERVO_PIN 14
#define RESET_BUTTON 4

// ============ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ============
char mqtt_server[40];
int previousSensorValue = HIGH;
unsigned long lastActivityMillis = 0;
const unsigned long IDLE_TIMEOUT_MS = 2 * 60 * 1000UL;  // 2 ‡∏ô‡∏≤‡∏ó‡∏µ

int delay_servo = 3000 ;

// ============ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô MQTT ============
bool connectMQTT() {
  while (!client.connected()) {
    Serial.println("Connecting to MQTT Broker...");
    if (client.connect("ESP32Client")) {
      Serial.println("MQTT connected");
      client.subscribe("esp8266/feedback");
      return true;
    } else {
      Serial.printf("MQTT connection failed, state: %d\n", client.state());
      delay(2000);
    }
  }
  return false;
}

// ============ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß ============
void controlServo(const String& command) {
  if (command == "open") {
    Serial.println("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß");
    playSound(1);
    myServo.write(90);

    while (digitalRead(SENSOR_PIN) == LOW) {
      Serial.println("‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏");
      delay(200);
    }

    delay(delay_servo);
    Serial.println("‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡πâ‡∏ß");
    myServo.write(0);

    if (!client.connected()) {
      Serial.println("MQTT ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á reconnect...");
      if (connectMQTT()) {
        Serial.println("Reconnect MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        Serial.println("Reconnect MQTT ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ");
        return;
      }
    }

    if (client.publish("esp8266/commands", "stop")) {
      Serial.println("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á stop ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      Serial.println("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á stop ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } else if (command == "close") {
    Serial.println("‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏ß");
  }
}

// ============ Callback MQTT ============
void callback(char* topic, byte* payload, unsigned int length) {
  String message = String((char*)payload).substring(0, length);
  Serial.printf("Received message: %s\n", message.c_str());

  if (message.startsWith("delay=")) {
    int newDelay = message.substring(6).toInt();
    if (newDelay > 0) {
      delay_servo = newDelay;
      preferences.begin("config", false);  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
      preferences.putInt("delay_servo", delay_servo);
      preferences.end();
      Serial.printf("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô delay_servo ‡πÄ‡∏õ‡πá‡∏ô %d ms\n", delay_servo);
    }
  } else {
    controlServo(message);
  }
}

// ============ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á ============
void playSound(int mode) {
  if (mode == 1) {
    digitalWrite(BUZZER_PIN, HIGH); delay(300); digitalWrite(BUZZER_PIN, LOW);
  } else if (mode == 2) {
    digitalWrite(BUZZER_PIN, HIGH); delay(100); digitalWrite(BUZZER_PIN, LOW);
    delay(100); digitalWrite(BUZZER_PIN, HIGH); delay(100); digitalWrite(BUZZER_PIN, LOW);
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(SENSOR_PIN, INPUT);
  pinMode(RESET_BUTTON, INPUT_PULLUP);
  digitalWrite(BUZZER_PIN, LOW);
  pinMode(2, OUTPUT);
  digitalWrite(2, LOW);              // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ MQTT server ‡∏à‡∏≤‡∏Å flash
  preferences.begin("config", true);  // read-only
  String savedServer = preferences.getString("mqtt_server", "192.168.1.100");
  int storedDelay = preferences.getInt("delay_servo", 3000); // default 3000 ms
  delay_servo = storedDelay;
  Serial.printf("‡πÇ‡∏´‡∏•‡∏î delay_servo ‡∏à‡∏≤‡∏Å flash: %d ms\n", delay_servo);
  preferences.end();
  strncpy(mqtt_server, savedServer.c_str(), sizeof(mqtt_server));
  
  // ============ ‡∏õ‡∏•‡∏∏‡∏Å‡∏à‡∏≤‡∏Å GPIO ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ============
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println("üì§ ‡∏ï‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å Deep Sleep (GPIO Wakeup)");
  } else {
    Serial.println("üîÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥");
  }

// üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï WiFi ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  if (digitalRead(RESET_BUTTON) == LOW) {
    Serial.println("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ WiFi...");
    WiFiManager wm;
    wm.resetSettings();
    digitalWrite(BUZZER_PIN, HIGH); delay(50); digitalWrite(BUZZER_PIN, LOW);
    delay(1950);
    ESP.restart();
    delay(5000);
  }

  // ============ WiFiManager ============
  WiFiManager wm;
  wm.setTimeout(120);
  WiFiManagerParameter custom_mqtt("server", "MQTT Server", mqtt_server, 40);
  wm.addParameter(&custom_mqtt);

  if (!wm.autoConnect("ESP-Setup")) {
    Serial.println("‚ùå WiFi connect failed. Restarting...");
    ESP.restart();
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ MQTT server ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡πà‡∏≤‡∏ô WiFiManager
  strcpy(mqtt_server, custom_mqtt.getValue());
  preferences.begin("config", false);  // read-write
  preferences.putString("mqtt_server", mqtt_server);
  preferences.end();

  Serial.println("WiFi connected");
  Serial.print("MQTT Server: ");
  Serial.println(mqtt_server);

  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  
  if (!client.connected()) {
    connectMQTT();
  }

  myServo.attach(SERVO_PIN);
  myServo.write(0);

  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  lastActivityMillis = millis();
}

void loop() {
  if (!client.connected() && !connectMQTT()) return;
  client.loop();

  int sensorValue = digitalRead(SENSOR_PIN);
  if (sensorValue != previousSensorValue) {
    const char* message;
    if (sensorValue == LOW) {
      message = "start";
      playSound(2);
    } else {
      message = "stop";
    }
    client.publish("esp8266/commands", message);
    Serial.printf("Published: %s\n", message);
    previousSensorValue = sensorValue;
    
    lastActivityMillis = millis();  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
  }

  // ============ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‚Üí sleep ============
  if (digitalRead(SENSOR_PIN) == HIGH && millis() - lastActivityMillis >= IDLE_TIMEOUT_MS) {
    Serial.println("üò¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Deep Sleep");

    // ‡∏õ‡∏•‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ SENSOR_PIN ‡πÄ‡∏õ‡πá‡∏ô LOW (‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏)
    esp_sleep_enable_ext0_wakeup((gpio_num_t)SENSOR_PIN, 0);  // LOW = wakeup
    delay(100);
    esp_deep_sleep_start();
  }

  delay(100);  // ‡∏•‡∏î‡πÇ‡∏´‡∏•‡∏î CPU
}
