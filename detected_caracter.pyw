import time
import os
from ultralytics import YOLO
from PIL import Image, ImageOps, ImageEnhance
import numpy as np
import random

# === CONFIG ===
MODEL_PATH = r"model/caracter.pt"
AUGMENT = True
RESULTS_FILE = r"txt_file/car_plate.txt"
IMAGE_FOLDER_PATH = r"result_plate"
MAX_INDEX = 20
DELETE_IMAGE = MAX_INDEX - 1

# === CLASS MAPPING ===
CLASS_MAP = {
    '0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9',
    'A01': '‡∏Å', 'A02': '‡∏Ç', 'A03': '‡∏É', 'A04': '‡∏Ñ', 'A05': '‡∏Ö', 'A06': '‡∏Ü', 'A07': '‡∏á',
    'A08': '‡∏à', 'A09': '‡∏â', 'A10': '‡∏ä', 'A11': '‡∏ã', 'A12': '‡∏å', 'A13': '‡∏ç', 'A14': '‡∏é',
    'A15': '‡∏è', 'A16': '‡∏ê', 'A17': '‡∏ë', 'A18': '‡∏í', 'A19': '‡∏ì', 'A20': '‡∏î', 'A21': '‡∏ï',
    'A22': '‡∏ñ', 'A23': '‡∏ó', 'A24': '‡∏ò', 'A25': '‡∏ô', 'A26': '‡∏ö', 'A27': '‡∏õ', 'A28': '‡∏ú',
    'A29': '‡∏ù', 'A30': '‡∏û', 'A31': '‡∏ü', 'A32': '‡∏†', 'A33': '‡∏°', 'A34': '‡∏¢', 'A35': '‡∏£',
    'A36': '‡∏•', 'A37': '‡∏ß', 'A38': '‡∏®', 'A39': '‡∏©', 'A40': '‡∏™', 'A41': '‡∏´', 'A42': '‡∏¨',
    'A43': '‡∏≠', 'A44': '‡∏Æ',
    'ACR': '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', 'ATG': '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', 'AYA': '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', 'BKK': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
    'BKN': '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', 'BRM': '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', 'CBI': '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', 'CCO': '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤',
    'CMI': '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', 'CNT': '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', 'CPM': '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', 'CPN': '‡∏ä‡∏∏‡∏°‡∏û‡∏£',
    'CRI': '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', 'CTI': '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', 'KBI': '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', 'KKN': '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',
    'KPT': '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', 'KRI': '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', 'KSN': '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', 'LEI': '‡πÄ‡∏•‡∏¢',
    'LPG': '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', 'LPN': '‡∏•‡∏≥‡∏û‡∏π‡∏ô', 'LRI': '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', 'MDH': '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£',
    'MKM': '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', 'MSN': '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', 'NAN': '‡∏ô‡πà‡∏≤‡∏ô', 'NBI': '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ',
    'NBP': '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', 'NKI': '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', 'NMA': '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', 'NPM': '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°',
    'NPT': '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', 'NRT': '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', 'NSN': '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', 'NWT': '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™',
    'NYK': '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', 'PBI': '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', 'PCT': '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', 'PKN': '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    'PKT': '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', 'PLG': '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', 'PLK': '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', 'PNA': '‡∏û‡∏±‡∏á‡∏á‡∏≤',
    'PNB': '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå', 'PRE': '‡πÅ‡∏û‡∏£‡πà', 'PRI': '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', 'PTE': '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ',
    'PTN': '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', 'PYO': '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', 'RBR': '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', 'RET': '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î',
    'RNG': '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', 'RYG': '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', 'SBR': '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', 'SKA': '‡∏™‡∏á‡∏Ç‡∏•‡∏≤',
    'SKM': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', 'SKN': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', 'SKW': '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', 'SNI': '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
    'SNK': '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', 'SPB': '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', 'SPK': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', 'SRI': '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ',
    'SRN': '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', 'SSK': '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', 'STI': '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', 'STN': '‡∏™‡∏ï‡∏π‡∏•',
    'TAK': '‡∏ï‡∏≤‡∏Å', 'TRG': '‡∏ï‡∏£‡∏±‡∏á', 'TRT': '‡∏ï‡∏£‡∏≤‡∏î', 'UBN': '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ',
    'UDN': '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', 'UTI': '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', 'UTT': '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå', 'YLA': '‡∏¢‡∏∞‡∏•‡∏≤',
    'YST': '‡∏¢‡πÇ‡∏™‡∏ò‡∏£','BTG':'‡πÄ‡∏ö‡∏ï‡∏á',
}


# === UTILITIES (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ===
def preprocess_img(img_path, augment=True):
    img = Image.open(img_path)
    img = ImageOps.exif_transpose(img)
    img = img.resize((640, 640))
    if augment:
        brightness_factor = 1.0 + random.uniform(-0.2, 0.2)
        img = ImageEnhance.Brightness(img).enhance(brightness_factor)
        np_img = np.array(img)
        num_noisy_pixels = int(np_img.shape[0] * np_img.shape[1] * 0.0081)
        for _ in range(num_noisy_pixels):
            x = random.randint(0, np_img.shape[0] - 1)
            y = random.randint(0, np_img.shape[1] - 1)
            np_img[x, y] = random.randint(0, 255)
        img = Image.fromarray(np_img)
    return img

def iou(box1, box2):
    x1 = max(box1[0], box2[0])
    y1 = max(box1[1], box2[1])
    x2 = min(box1[2], box2[2])
    y2 = min(box1[3], box2[3])
    inter_area = max(0, x2 - x1) * max(0, y2 - y1)
    box1_area = (box1[2]-box1[0]) * (box1[3]-box1[1])
    box2_area = (box2[2]-box2[0]) * (box2[3]-box2[1])
    union_area = box1_area + box2_area - inter_area
    return inter_area / union_area if union_area > 0 else 0

def sort_left_right(group):
    return [b['label'] for b in sorted(group, key=lambda x: x['box'][0])]

def process_image(image_path):
    img = preprocess_img(image_path, augment=AUGMENT)
    results = model(img, conf=0.5)
    boxes_with_labels = []
    for box, conf, cls in zip(results[0].boxes.xyxy, results[0].boxes.conf, results[0].boxes.cls):
        box = box.cpu().numpy()
        class_name = model.names[int(cls)]
        label_thai = CLASS_MAP.get(class_name, class_name)
        boxes_with_labels.append({'box': box, 'conf': float(conf), 'label': label_thai, 'label_raw': class_name})

    filtered = []
    for b in boxes_with_labels:
        skip = False
        for f in filtered:
            if b['label'] == f['label'] and iou(b['box'], f['box']) > 0.5:
                if b['conf'] > f['conf']:
                    filtered.remove(f)
                    break
                else:
                    skip = True
                    break
        if not skip:
            filtered.append(b)

    group1 = []
    group2 = []
    for b in filtered:
        label = b['label_raw']
        if label.startswith('A') or label.isdigit():
            group1.append(b)
        else:
            group2.append(b)

    final_labels = sort_left_right(group1) + sort_left_right(group2)
    return ''.join(final_labels)

# === LOAD MODEL ONCE ===
model = YOLO(MODEL_PATH)

# === MAIN LOOP ===
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å set ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö timestamp
processed_files = {}  # {filename: modification_time}
idx = 1
i = 1

while True:
    filename = f"plate_{i}.jpg"
    img_path = os.path.join(IMAGE_FOLDER_PATH, filename)

    if not os.path.exists(img_path):
        i += 1
        if i > MAX_INDEX:
            i = 1
        continue

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    current_mtime = os.path.getmtime(img_path)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if filename in processed_files and processed_files[filename] == current_mtime:
        i += 1
        if i > MAX_INDEX:
            i = 1
        continue

    try:
        plate_text = process_image(img_path)
        with open(RESULTS_FILE, "a", encoding="utf-8") as f:
            if plate_text:
                print(f"üì∑ {filename} -> {plate_text}")
                f.write(f"{plate_text}\n")
            else:
                print(f"üì∑ {filename} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
                f.write(f"{idx}. ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å timestamp ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        processed_files[filename] = current_mtime
        idx += 1
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö {filename}: {e}")
        with open(RESULTS_FILE, "a", encoding="utf-8") as f:
            f.write(f"{idx}. ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}\n")
        idx += 1

    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ i == 4
    if i == 19:
        for del_i in range(1, DELETE_IMAGE + 1):
            del_filename = f'plate_{del_i}.jpg'
            del_file_path = os.path.join(IMAGE_FOLDER_PATH, del_filename)
            
            if os.path.exists(del_file_path):
                try:
                    os.remove(del_file_path)
                    print(f'‡∏•‡∏ö: {del_filename}')
                    # ‡∏•‡∏ö timestamp ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dict ‡∏î‡πâ‡∏ß‡∏¢
                    if del_filename in processed_files:
                        del processed_files[del_filename]
                except Exception as e:
                    print(f'‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {del_filename}, ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {e}')
            else:
                print(f'‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {del_filename}')

    # ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï i ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á MAX_INDEX
    if i == MAX_INDEX:
        i = 1
        
    i += 1
    time.sleep(2)